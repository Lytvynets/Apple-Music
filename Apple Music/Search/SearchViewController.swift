//
//  SearchViewController.swift
//  Apple Music
//
//  Created by Vlad Lytvynets on 18.06.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class{
    func displaySomething(viewModel: Search.Something.ViewModel.ViewModelData)
}

class SearchViewController: UIViewController, SearchDisplayLogic{
    
    private var searchViewModel = SearchViewModel.init(cells: [])
    private var timer: Timer?
    let searchController = UISearchController(searchResultsController: nil)
    var networkmanager = NetworkManager()
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    var tracks = [Track]()
    
    @IBOutlet weak var table: UITableView!
    
    //MARK:- Setup
    private func setup(){
        let viewController        = self
        let interactor            = SearchInteractor()
        let presenter             = SearchPresenter()
        let router                = SearchRouter()
        viewController.interactor = interactor
        viewController.router     = router
        interactor.presenter      = presenter
        presenter.viewController  = viewController
        router.viewController     = viewController
        router.dataStore          = interactor
    }
    
    
    //MARK:- viewDidLoad
    override func viewDidLoad(){
        super.viewDidLoad()
        setup()
        setupTableView()
        setupSearchBar()
    }
    
    
    // MARK:- Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    private func setupSearchBar(){
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.delegate = self
    }
    
    
    private func setupTableView(){
        table.register(UITableViewCell.self, forCellReuseIdentifier: "callId")
        let nib = UINib(nibName: "TrackCell", bundle: nil)
        table.register(nib, forCellReuseIdentifier: TrackCell.reuseId)
    }
    
    
    func displaySomething(viewModel: Search.Something.ViewModel.ViewModelData){
        
        switch viewModel{
        case .some:
            print("some view")
        
        case .displayTrack(let searchViewModel):
            self.searchViewModel = searchViewModel
            table.reloadData()
        
        case .viewVideo:
            print("ViewVideo")
        }
    }
}


//MARK:- TableView
extension SearchViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return searchViewModel.cells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = table.dequeueReusableCell(withIdentifier: TrackCell.reuseId, for: indexPath) as! TrackCell
        let cellViewModel = searchViewModel.cells[indexPath.row]
       
        print("cellViewModel.ReviewURL:", cellViewModel.previewUrl)
        cell.trackImage.backgroundColor = .red
        cell.set(viewModel: cellViewModel)
        
        
        
//        cell.textLabel?.text = "\(cellViewModel.artistName) \n \(cellViewModel.trackName)"
//        cell.textLabel?.numberOfLines = 2
//        cell.imageView?.image = #imageLiteral(resourceName: "hacker_PNG28")
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 84
    }
    
}


//MARK:- SearchBarDelegate
extension SearchViewController: UISearchBarDelegate{
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
      
        timer?.invalidate()
        timer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false, block: { [weak self] (_) in
           
            self?.interactor?.makeRequest(request: Search.Something.Request.RequestType.getTracks(searchText: searchText))
        })
    }
}


